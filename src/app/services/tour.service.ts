import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { Router, NavigationEnd } from '@angular/router';
import { filter } from 'rxjs/operators';

export interface TourStep {
  title: string;
  content: string;
  target?: string;
  position?: 'top' | 'bottom' | 'left' | 'right';
  features: string[];
  route: string;
  pageSpecific: boolean; // Nueva propiedad para indicar si es espec√≠fico de p√°gina
}

@Injectable({
  providedIn: 'root'
})
export class TourService {
  private tourActiveSubject = new BehaviorSubject<boolean>(false);
  public tourActive$ = this.tourActiveSubject.asObservable();

  private currentStepSubject = new BehaviorSubject<number>(0);
  public currentStep$ = this.currentStepSubject.asObservable();

  private showPageModalSubject = new BehaviorSubject<boolean>(false);
  public showPageModal$ = this.showPageModalSubject.asObservable();

  private currentPageStepSubject = new BehaviorSubject<TourStep | null>(null);
  public currentPageStep$ = this.currentPageStepSubject.asObservable();

  private tourSteps: TourStep[] = [
    {
      title: 'P√°gina Principal - Home',
      content: 'La p√°gina de inicio donde los usuarios pueden conocer el restaurante.',
      route: '/home',
      pageSpecific: true,
      features: [
        'Ver informaci√≥n general del restaurante',
        'Acceder r√°pidamente a la carta',
        'Conocer las especialidades del d√≠a',
        'Ver comentarios de otros clientes',
        'Informaci√≥n de ubicaci√≥n y horarios',
        'Navegaci√≥n intuitiva a todas las secciones'
      ]
    },
    {
      title: 'Carta de Productos',
      content: 'Explora toda nuestra variedad de productos organizados por categor√≠as.',
      route: '/carta',
      pageSpecific: true,
      features: [
        'Ver todos los productos disponibles',
        'Filtrar por categor√≠as (hamburguesas, lomitos, √°rabes, etc.)',
        'Ver detalles de cada producto (ingredientes, precios)',
        'Agregar productos al carrito con un clic',
        'Ver im√°genes en alta calidad de cada producto',
        'Buscar productos espec√≠ficos',
        'Comparar precios y opciones'
      ]
    },
    {
      title: 'Carrito de Compras',
      content: 'Gestiona los productos que deseas ordenar.',
      route: '/carrito',
      pageSpecific: true,
      features: [
        'Ver todos los productos agregados',
        'Modificar cantidades de productos f√°cilmente',
        'Eliminar productos del carrito',
        'Ver el total de la compra en tiempo real',
        'Proceder al checkout de forma segura',
        'Guardar carrito para m√°s tarde',
        'Aplicar descuentos y promociones'
      ]
    },
    {
      title: 'Dashboard Personal',
      content: 'Tu panel personal donde puedes ver tu historial y gestionar tus pedidos.',
      route: '/dashboard',
      pageSpecific: true,
      features: [
        'Ver historial completo de pedidos',
        'Seguir el estado de pedidos activos en tiempo real',
        'Acceder a facturas y comprobantes',
        'Ver estad√≠sticas de consumo personal',
        'Gestionar m√∫ltiples direcciones de entrega',
        'Repetir pedidos anteriores f√°cilmente',
        'Ver puntos de fidelidad (en versi√≥n completa)'
      ]
    },
    {
      title: 'Perfil de Usuario',
      content: 'Edita tu informaci√≥n personal y configuraciones de cuenta.',
      route: '/perfil',
      pageSpecific: true,
      features: [
        'Editar informaci√≥n personal (nombre, apellido, tel√©fono)',
        'Actualizar direcci√≥n de entrega principal',
        'Cambiar foto de perfil',
        'Gestionar configuraciones de privacidad',
        '‚ö†Ô∏è DEMO: Email no editable (disponible en versi√≥n completa)',
        '‚ö†Ô∏è DEMO: No se puede eliminar cuenta (disponible en versi√≥n completa)',
        '‚úÖ VERSI√ìN COMPLETA: Editar email y eliminar cuenta libremente',
        'Configurar preferencias de notificaciones'
      ]
    },
    {
      title: 'Contacto',
      content: 'Ponte en contacto con nosotros para consultas o sugerencias.',
      route: '/contacto',
      pageSpecific: true,
      features: [
        'Enviar mensajes directos al restaurante',
        'Ver informaci√≥n de contacto completa',
        'Formulario de consultas y sugerencias',
        'Ver ubicaci√≥n exacta en mapa interactivo',
        'Horarios de atenci√≥n detallados',
        'Links directos a redes sociales',
        'N√∫mero de WhatsApp para consultas r√°pidas'
      ]
    },
    {
      title: 'Qui√©nes Somos',
      content: 'Conoce al equipo de desarrollo detr√°s de esta aplicaci√≥n.',
      route: '/quienes-somos',
      pageSpecific: true,
      features: [
        'Informaci√≥n sobre el equipo de desarrollo',
        'Tecnolog√≠as utilizadas en el proyecto',
        'Historia del desarrollo de la aplicaci√≥n',
        'Contacto directo con los desarrolladores',
        'Cr√©ditos y reconocimientos',
        'Metodolog√≠a de desarrollo utilizada'
      ]
    }
  ];

  constructor(private router: Router) {
    // Escuchar cambios de ruta para mostrar modales espec√≠ficos de p√°gina
    this.router.events.pipe(
      filter(event => event instanceof NavigationEnd)
    ).subscribe((event) => {
      if (this.tourActiveSubject.value && event instanceof NavigationEnd) {
        this.checkCurrentPageStep(event.url);
      }
    });
  }

  startTour(userEmail: string): void {
    if (userEmail === 'demo@demo.com') {
      this.tourActiveSubject.next(true);
      this.currentStepSubject.next(0);
      // Navegar a la primera p√°gina del tour
      this.router.navigate(['/home']).then(() => {
        // Peque√±o delay para asegurar que la navegaci√≥n se complete
        setTimeout(() => {
          this.checkCurrentPageStep('/home');
        }, 500);
      });
    }
  }

  stopTour(): void {
    this.tourActiveSubject.next(false);
    this.currentStepSubject.next(0);
    this.showPageModalSubject.next(false);
    this.currentPageStepSubject.next(null);
  }

  nextStep(): void {
    const currentStep = this.currentStepSubject.value;
    if (currentStep < this.tourSteps.length - 1) {
      const nextStepIndex = currentStep + 1;
      this.currentStepSubject.next(nextStepIndex);
      
      // Cerrar el modal actual antes de navegar
      this.showPageModalSubject.next(false);
      
      // Navegar a la ruta del siguiente paso
      const nextStep = this.tourSteps[nextStepIndex];
      this.router.navigate([nextStep.route]).then(() => {
        // Peque√±o delay para asegurar que la navegaci√≥n se complete
        setTimeout(() => {
          this.checkCurrentPageStep(nextStep.route);
        }, 300);
      });
    } else {
      this.stopTour();
    }
  }

  previousStep(): void {
    const currentStep = this.currentStepSubject.value;
    if (currentStep > 0) {
      const prevStepIndex = currentStep - 1;
      this.currentStepSubject.next(prevStepIndex);
      
      // Cerrar el modal actual antes de navegar
      this.showPageModalSubject.next(false);
      
      // Navegar a la ruta del paso anterior
      const prevStep = this.tourSteps[prevStepIndex];
      this.router.navigate([prevStep.route]).then(() => {
        // Peque√±o delay para asegurar que la navegaci√≥n se complete
        setTimeout(() => {
          this.checkCurrentPageStep(prevStep.route);
        }, 300);
      });
    }
  }

  getCurrentStep(): TourStep {
    return this.tourSteps[this.currentStepSubject.value];
  }

  getTotalSteps(): number {
    return this.tourSteps.length;
  }

  getCurrentStepNumber(): number {
    return this.currentStepSubject.value + 1;
  }

  goToStep(stepIndex: number): void {
    if (stepIndex >= 0 && stepIndex < this.tourSteps.length) {
      this.currentStepSubject.next(stepIndex);
      
      // Cerrar el modal actual antes de navegar
      this.showPageModalSubject.next(false);
      
      const step = this.tourSteps[stepIndex];
      this.router.navigate([step.route]).then(() => {
        // Peque√±o delay para asegurar que la navegaci√≥n se complete
        setTimeout(() => {
          this.checkCurrentPageStep(step.route);
        }, 300);
      });
    }
  }

  // M√©todo mejorado para verificar si la p√°gina actual tiene un paso de tour
  private checkCurrentPageStep(currentUrl: string): void {
    const currentStep = this.tourSteps.find(step => 
      currentUrl === step.route || currentUrl.startsWith(step.route)
    );
    
    if (currentStep && this.tourActiveSubject.value) {
      console.log('üéØ Mostrando modal para:', currentStep.title);
      // Mostrar el modal espec√≠fico de esta p√°gina
      this.currentPageStepSubject.next(currentStep);
      this.showPageModalSubject.next(true);
      
      // Actualizar el paso actual si corresponde
      const stepIndex = this.tourSteps.findIndex(step => step === currentStep);
      if (stepIndex !== -1 && stepIndex !== this.currentStepSubject.value) {
        this.currentStepSubject.next(stepIndex);
      }
    }
  }

  // M√©todo para cerrar el modal de p√°gina espec√≠fica
  closePageModal(): void {
    this.showPageModalSubject.next(false);
  }

  // M√©todo para obtener el paso de la p√°gina actual
  getCurrentPageStep(): TourStep | null {
    return this.currentPageStepSubject.value;
  }
}
